[{"title":"Intro","type":0,"sectionRef":"#","url":"/package/docs/intro","content":"","keywords":""},{"title":"Difference in API packages/modules​","type":1,"pageTitle":"Intro","url":"/package/docs/intro#difference-in-api-packagesmodules","content":"Clanny currently has two API packages available for use. "},{"title":"API module​","type":1,"pageTitle":"Intro","url":"/package/docs/intro#api-module","content":"This API Module is very easy to understand for beginner programmers because of all the checks it runs on startup and API key data can be set in Roblox studio itself. Currently all Free Assets use this to run, unless you switch the code to use another module/package. But its major downfall is needing a new module for every API key you need to use in your game.  Startup Checks:  HTTP enabledThe code is up-to-date + give you information about your current versionCheck that the API data is in a secure location to prevent hackers from getting itLogs everything that happens to the Dev Console "},{"title":"Modern Package​","type":1,"pageTitle":"Intro","url":"/package/docs/intro#modern-package","content":"This package is our newest way of using the API. It allows programmers the ability to never leave the script they are working in by giving them all information needed while they code. It is made to handle the modern version of Roblox codding and allows quick API usage. The package is great for groups needing two or more API keys to be used at a time and follows all rate limits. "},{"title":"Self-Made​","type":1,"pageTitle":"Intro","url":"/package/docs/intro#self-made","content":"These packages are made by individuals but still get a spot here. These are great for groups who know exactly what they want for their groups and only need to code in those tools. None of the extra stuff we add in to be special. But with one major downfall, upon the announcement of every API update a developer has to figure out how to use the API update, update the code, check it, and release it. All Clanny-made assets are updated by those why created the update and sometimes we can update our assets before we even release the API update to public. "},{"title":"Creating your API key","type":0,"sectionRef":"#","url":"/package/docs/creatingkeys","content":"","keywords":""},{"title":"Dashboard​","type":1,"pageTitle":"Creating your API key","url":"/package/docs/creatingkeys#dashboard","content":"As most people know, Discord's slash commands can be really annoying. So because of that we have a dashboard that allows easy setup of your group, one of those things is creating your API keys. If you've tried running the /API command you have most likely already been directed to the dashboard. "},{"title":"Logging in​","type":1,"pageTitle":"Creating your API key","url":"/package/docs/creatingkeys#logging-in","content":"Once you get to the dashboard you'll most likely be asked to login through Discord. Don't worry, the login redirects you to Discord, then they tell the website if you actually own your account or not. All your info stays safe with Discord. "},{"title":"Navigating to the API page​","type":1,"pageTitle":"Creating your API key","url":"/package/docs/creatingkeys#navigating-to-the-api-page","content":"Once logged in, find the group you want to create an API key for and press &quot;Open&quot; to see your group's information. Once there, look to the Left side of your screen to the button saying &quot;Group API Keys&quot; and click on it. "},{"title":"API creation​","type":1,"pageTitle":"Creating your API key","url":"/package/docs/creatingkeys#api-creation","content":"Now, You will see a button saying &quot;Create New API Key&quot;. Once you click it you will be given your API data DO NOT SHARE IT. But remember to copy all the information on the prompt is shows, once you close the prompt you can not open it again to see the API Key. Your Key ID acts as an identifier or a name for the key and tells the code which to authenticate so that will stay visible to you. "},{"title":"Deleting API keys​","type":1,"pageTitle":"Creating your API key","url":"/package/docs/creatingkeys#deleting-api-keys","content":"Because it can be really unsafe and a mess if you could only create these keys (trust me, the clanny group has over 20 keys) we give you a way of deleting them. Simply press that &quot;Delete&quot; button, once deleted that API Key is no longer usable "},{"title":"Installation","type":0,"sectionRef":"#","url":"/package/docs/installation","content":"","keywords":""},{"title":"VS Code​","type":1,"pageTitle":"Installation","url":"/package/docs/installation#vs-code","content":"VS Code or Visual Studio Code is a code editor used by many devs and is just one way to program. Many Roblox groups use this editor for game development, then connect to Roblox through a service like Rojo. Rojo Rojo is a program for Roblox with multiple usages. Including, connecting directly to Roblox Studio so you can see changes immediately, and building a game file from your terminal. "},{"title":"Installation​","type":1,"pageTitle":"Installation","url":"/package/docs/installation#installation-1","content":"Install your favorite Toolchain manager, personally I use Foreman.Next setup your toolchain manager with the tools needed. If you're using Foreman, create a file named foreman.toml, the code should look something like this. Make sure to run install on your manager to get the files you need. [tools] rojo = { source = &quot;rojo-rbx/rojo&quot;, version = &quot;7.3.0&quot; } wally = { source = &quot;UpliftGames/wally&quot;, version = &quot;0.3.1&quot; }  Next, create or find your wally.toml file. Inside of it crete a new line with [server-dependencies]. And add Clanny = &quot;minecraft2fun/clanny@^01.2&quot; underneath of it. [server-dependencies] Clanny = &quot;minecraft2fun/clanny@^0.1.2&quot;  Run wally install to install your new package.All set, you may need to shuffle around your package.default.json file to make sure your server packages are noticed and being put into the game. "},{"title":"Roblox Studio​","type":1,"pageTitle":"Installation","url":"/package/docs/installation#roblox-studio","content":"Coming Soon COMING SOON: if you really want to use this still, head to Wally/clanny and click &quot;Download&quot;. Copy all code in the .lua file into a Module Script in Roblox studio. Make sure to place the script in ServerScriptService or ServerStorage. From there continue as normal to the Package Usage page. "},{"title":"Using our modern API Package","type":0,"sectionRef":"#","url":"/package/docs/packageusage","content":"","keywords":""},{"title":"Calling the module​","type":1,"pageTitle":"Using our modern API Package","url":"/package/docs/packageusage#calling-the-module","content":"To call the module simply require() the script, it may look something like this. local Clanny = require(game.ServerStorage.Clanny)  "},{"title":"Putting in your API keys.​","type":1,"pageTitle":"Using our modern API Package","url":"/package/docs/packageusage#putting-in-your-api-keys","content":"API keys can be put in whenever you want, but if you try to call an endpoint before creating the key your code will error. If you're expecting to use the API from the same script running .CreateToken make sure to make it a variable so save time later since you need the variable to call API Endpoints. local Clanny = require(game.ServerStorage.Clanny) local token = Clanny.CreateToken({ Name=&quot;&quot;,--optional ApiKey=&quot;&quot;, KeyId=&quot;&quot;, GroupId=0 })  "},{"title":".CreateToken variables​","type":1,"pageTitle":"Using our modern API Package","url":"/package/docs/packageusage#createtoken-variables","content":"Name: An optional field so you can name your tokens, tokens can be used later to get your APIendpoints, or delete your API Key from the scripts. Will default to &quot;Primary&quot; and then &quot;Secondary&quot; if no name is given. If you make more than two Tokens without a name, the third will return an error.ApiKey: A Required field that is the long ID you received from creating your API.KeyId: A Required field that is the short ID you received from creating your API.GroupId: A Required field that is you Roblox group's ID, can be found in the group page URL. "},{"title":"Using Token Name to get API Endpoints​","type":1,"pageTitle":"Using our modern API Package","url":"/package/docs/packageusage#using-token-name-to-get-api-endpoints","content":"As stated above, you either need a variable tied to a .CreateToken or this .GetToken function to be able to call the API. This function can be called from a different script than where .CreateToken was called so .CreateToken only has to be called once per API Key. local Clanny = require(game.ServerStorage.Clanny) local token = Clanny.GetToken(TokenName)  TokenName is either the Name field used in .CreateToken or the default value of &quot;Primary&quot;, &quot;Secondary&quot;. "},{"title":"Calling API endpoints​","type":1,"pageTitle":"Using our modern API Package","url":"/package/docs/packageusage#calling-api-endpoints","content":"Remember, API endpoints can only be called from the two functions below "},{"title":"From .CreateToken​","type":1,"pageTitle":"Using our modern API Package","url":"/package/docs/packageusage#from-createtoken","content":"local Clanny = require(game.ServerStorage.Clanny) local token = Clanny.CreateToken({ Name=&quot;&quot;,--optional ApiKey=&quot;&quot;, KeyId=&quot;&quot;, GroupId=0 }) print(token.XP.GetXp(UserId))  "},{"title":"From .GetToken​","type":1,"pageTitle":"Using our modern API Package","url":"/package/docs/packageusage#from-gettoken","content":"local Clanny = require(game.ServerStorage.Clanny) local token = Clanny.GetToken(TokenName) print(token.XP.GetXp(UserId))  Or, if you want to make it dynamic. local Clanny = require(game.ServerStorage.Clanny) local function GetXp(TokenName:string, UserId:number | string) return Clanny.GetToken(TokenName).XP.GetXp(UserId) end print(GetXp(&quot;Primary&quot;, 1), GetXp(&quot;Secondary&quot;, 5))  "},{"title":"Deleting API Keys​","type":1,"pageTitle":"Using our modern API Package","url":"/package/docs/packageusage#deleting-api-keys","content":"This will cause any API calls from the deleted token to error. local Clanny = require(game.ServerStorage.Clanny) Clanny.DeleteToken(TokenName)  TokenName is either the Name field used in .CreateToken or the default value of &quot;Primary&quot;, &quot;Secondary&quot;. "},{"title":"Quick Delete - UNRELEASED​","type":1,"pageTitle":"Using our modern API Package","url":"/package/docs/packageusage#quick-delete---unreleased","content":"Quickly deletes all API Keys and Token data local Clanny = require(game.ServerStorage.Clanny) Clanny.QuickDelete()  "},{"title":"UtilServer","type":0,"sectionRef":"#","url":"/package/api/UtilServer","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#types","content":" "},{"title":"NewToken​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#NewToken","content":"&lt;/&gt; interface NewToken { Name?: &quot;Name&quot;-- The name of the new token. ApiKey: &quot;ApiKey&quot;-- The long ID when generating your API key. KeyId: &quot;KeyId&quot;-- the short ID when generating your API key. GroupId: &quot;GroupId&quot;-- Your Roblox group's ID. }  Name field Although the &quot;Name&quot; field is not required, is is highly suggested to have it. Especially when having two or more instances running. Without the name field the first token created will receive the name &quot;Primary&quot;, and the second to be made will receive &quot;Secondary&quot;. Any after that will error.  "},{"title":"XpReturn​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#XpReturn","content":"&lt;/&gt; interface XpReturn { Code: &quot;Success&quot; | &quot;NotSetup&quot; | &quot;Failed&quot;, OldAmount: number, NewAmount: number, }   "},{"title":"RankReturn​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#RankReturn","content":"&lt;/&gt; interface RankReturn { id: number, locked: boolean, name: string, perm: number, rank: number, xp: number, prefix: string, prefixEnabled: boolean, role: string, roleEnabled:: boolean, }   "},{"title":"RoleReturn​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#RoleReturn","content":"&lt;/&gt; interface RoleReturn { id: number, name: string, rank: number, memberCount: number, ID: number, }   "},{"title":"MedalReturn​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#MedalReturn","content":"&lt;/&gt; interface MedalReturn { Description: string, Name: string, Emoji: string, Id: number, }   "},{"title":"UserMedalReturn​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#UserMedalReturn","content":"&lt;/&gt; interface UserMedalReturn { amount: number id: string | number, }   "},{"title":"APIpoints​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#APIpoints","content":"&lt;/&gt; type APIpoints = {XPendpoints&amp;RANKendpoints&amp;MEDALSendpoints&amp;PENDINGendpoints}   "},{"title":"XPendpoints​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#XPendpoints","content":"&lt;/&gt; interface XPendpoints { GetXp: (userId: number | string) → number IncrementXp: ( userId: number | string, amount: number | string ) → XpReturn, SetXp: ( userId: number | string, amount: number | string ) → XpReturn, }   "},{"title":"RANKendpoints​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#RANKendpoints","content":"&lt;/&gt; interface RANKendpoints { GetUserRank: (userId: number | string) → { Previous: RankReturn | nil, Current: RankReturn | nil, Next: RankReturn | nil }, GetAllRanks: () → {&lt;RankReturn&gt;}, PromoteUser: (userId: number | string) → { newRole: RoleReturn | nil, oldRole: RoleReturn | nil }, DemoteUser: (userId: number | string) → { newRole: RoleReturn | nil, oldRole: RoleReturn | nil }, SetUserRank: ( userIdnumber | string, ranknumber | string ) → { newRole: RoleReturn | nil, oldRole: RoleReturn | nil } }   "},{"title":"MEDALSendpoints​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#MEDALSendpoints","content":"&lt;/&gt; interface MEDALSendpoints { GetAllMedals: () → {&lt;MedalReturn&gt;}, GetUserMedals: (userId: number | string) → {MedalReturn&amp;UserMedalReturn}, GetUserMedalCount: ( userId: number | string, medalId: number | string ) → {UserMedalReturn | &quot;nomedal&quot;}, AddUserMedal: ( userId: number | string, medalId: number | string ) → &quot;added1&quot; | &quot;createdStore&quot;, RemoveUserMedal: ( userId: number | string, medalId: number | string ) → &quot;removed1&quot; | &quot;deletedStore&quot; | &quot;doesntHaveMedal&quot;, }   "},{"title":"PENDINGendpoints​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#PENDINGendpoints","content":"&lt;/&gt; interface PENDINGendpoints { AcceptUser: (userId: number | string) → boolean, DeclineUser: (userId: number | string) → boolean, } Used to accept or decline pending users into your group. "},{"title":"Functions​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#functions","content":" "},{"title":"CreateToken​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#CreateToken","content":"&lt;/&gt; UtilServer.CreateToken({TokenData}: NewToken) → APIpoints Initiating your new API. You can start calling API endpoints directly after from the table that gets returned.  "},{"title":"GetToken​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#GetToken","content":"&lt;/&gt; UtilServer.GetToken(TokenName: string) → APIpoints A way to get your APIpoints through the Token name.  "},{"title":"DeleteToken​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#DeleteToken","content":"&lt;/&gt; UtilServer.DeleteToken(TokenName: string) → boolean A way to delete your API key data from the code. 💀 if you actually find a use for this, please tell me. minecraft2fun on Discord.  "},{"title":"QuickClean​","type":1,"pageTitle":"UtilServer","url":"/package/api/UtilServer#QuickClean","content":"Unreleased &lt;/&gt; UtilServer.QuickClean() → boolean Deletes all API Key data immediately, great if you really want to be careful. "}]